///
/// JHybridNitroGeolocationSpec.cpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#include "JHybridNitroGeolocationSpec.hpp"

// Forward declaration of `RNConfiguration` to properly resolve imports.
namespace margelo::nitro::nitrogeolocation { struct RNConfiguration; }
// Forward declaration of `AuthorizationLevel` to properly resolve imports.
namespace margelo::nitro::nitrogeolocation { enum class AuthorizationLevel; }
// Forward declaration of `LocationProvider` to properly resolve imports.
namespace margelo::nitro::nitrogeolocation { enum class LocationProvider; }

#include "RNConfiguration.hpp"
#include "JRNConfiguration.hpp"
#include "AuthorizationLevel.hpp"
#include <optional>
#include "JAuthorizationLevel.hpp"
#include "LocationProvider.hpp"
#include "JLocationProvider.hpp"

namespace margelo::nitro::nitrogeolocation {

  jni::local_ref<JHybridNitroGeolocationSpec::jhybriddata> JHybridNitroGeolocationSpec::initHybrid(jni::alias_ref<jhybridobject> jThis) {
    return makeCxxInstance(jThis);
  }

  void JHybridNitroGeolocationSpec::registerNatives() {
    registerHybrid({
      makeNativeMethod("initHybrid", JHybridNitroGeolocationSpec::initHybrid),
    });
  }

  size_t JHybridNitroGeolocationSpec::getExternalMemorySize() noexcept {
    static const auto method = javaClassStatic()->getMethod<jlong()>("getMemorySize");
    return method(_javaPart);
  }

  void JHybridNitroGeolocationSpec::dispose() noexcept {
    static const auto method = javaClassStatic()->getMethod<void()>("dispose");
    method(_javaPart);
  }

  // Properties
  

  // Methods
  void JHybridNitroGeolocationSpec::setRNConfiguration(const RNConfiguration& config) {
    static const auto method = javaClassStatic()->getMethod<void(jni::alias_ref<JRNConfiguration> /* config */)>("setRNConfiguration");
    method(_javaPart, JRNConfiguration::fromCpp(config));
  }

} // namespace margelo::nitro::nitrogeolocation
