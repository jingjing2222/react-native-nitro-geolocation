///
/// JHybridNitroGeolocationSpec.cpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#include "JHybridNitroGeolocationSpec.hpp"

// Forward declaration of `RNConfigurationInternal` to properly resolve imports.
namespace margelo::nitro::nitrogeolocation { struct RNConfigurationInternal; }
// Forward declaration of `AuthorizationLevelInternal` to properly resolve imports.
namespace margelo::nitro::nitrogeolocation { enum class AuthorizationLevelInternal; }
// Forward declaration of `LocationProviderInternal` to properly resolve imports.
namespace margelo::nitro::nitrogeolocation { enum class LocationProviderInternal; }
// Forward declaration of `GeolocationError` to properly resolve imports.
namespace margelo::nitro::nitrogeolocation { struct GeolocationError; }
// Forward declaration of `GeolocationPosition` to properly resolve imports.
namespace margelo::nitro::nitrogeolocation { struct GeolocationPosition; }
// Forward declaration of `GeolocationCoordinates` to properly resolve imports.
namespace margelo::nitro::nitrogeolocation { struct GeolocationCoordinates; }
// Forward declaration of `GeolocationOptions` to properly resolve imports.
namespace margelo::nitro::nitrogeolocation { struct GeolocationOptions; }

#include "RNConfigurationInternal.hpp"
#include "JRNConfigurationInternal.hpp"
#include "AuthorizationLevelInternal.hpp"
#include <optional>
#include "JAuthorizationLevelInternal.hpp"
#include "LocationProviderInternal.hpp"
#include "JLocationProviderInternal.hpp"
#include <functional>
#include "JFunc_void.hpp"
#include "GeolocationError.hpp"
#include "JFunc_void_GeolocationError.hpp"
#include "JGeolocationError.hpp"
#include <string>
#include "GeolocationPosition.hpp"
#include "JFunc_void_GeolocationPosition.hpp"
#include "JGeolocationPosition.hpp"
#include "GeolocationCoordinates.hpp"
#include "JGeolocationCoordinates.hpp"
#include "GeolocationOptions.hpp"
#include "JGeolocationOptions.hpp"

namespace margelo::nitro::nitrogeolocation {

  jni::local_ref<JHybridNitroGeolocationSpec::jhybriddata> JHybridNitroGeolocationSpec::initHybrid(jni::alias_ref<jhybridobject> jThis) {
    return makeCxxInstance(jThis);
  }

  void JHybridNitroGeolocationSpec::registerNatives() {
    registerHybrid({
      makeNativeMethod("initHybrid", JHybridNitroGeolocationSpec::initHybrid),
    });
  }

  size_t JHybridNitroGeolocationSpec::getExternalMemorySize() noexcept {
    static const auto method = javaClassStatic()->getMethod<jlong()>("getMemorySize");
    return method(_javaPart);
  }

  void JHybridNitroGeolocationSpec::dispose() noexcept {
    static const auto method = javaClassStatic()->getMethod<void()>("dispose");
    method(_javaPart);
  }

  // Properties
  

  // Methods
  void JHybridNitroGeolocationSpec::setRNConfiguration(const RNConfigurationInternal& config) {
    static const auto method = javaClassStatic()->getMethod<void(jni::alias_ref<JRNConfigurationInternal> /* config */)>("setRNConfiguration");
    method(_javaPart, JRNConfigurationInternal::fromCpp(config));
  }
  void JHybridNitroGeolocationSpec::requestAuthorization(const std::optional<std::function<void()>>& success, const std::optional<std::function<void(const GeolocationError& /* error */)>>& error) {
    static const auto method = javaClassStatic()->getMethod<void(jni::alias_ref<JFunc_void::javaobject> /* success */, jni::alias_ref<JFunc_void_GeolocationError::javaobject> /* error */)>("requestAuthorization_cxx");
    method(_javaPart, success.has_value() ? JFunc_void_cxx::fromCpp(success.value()) : nullptr, error.has_value() ? JFunc_void_GeolocationError_cxx::fromCpp(error.value()) : nullptr);
  }
  void JHybridNitroGeolocationSpec::getCurrentPosition(const std::function<void(const GeolocationPosition& /* position */)>& success, const std::optional<std::function<void(const GeolocationError& /* error */)>>& error, const std::optional<GeolocationOptions>& options) {
    static const auto method = javaClassStatic()->getMethod<void(jni::alias_ref<JFunc_void_GeolocationPosition::javaobject> /* success */, jni::alias_ref<JFunc_void_GeolocationError::javaobject> /* error */, jni::alias_ref<JGeolocationOptions> /* options */)>("getCurrentPosition_cxx");
    method(_javaPart, JFunc_void_GeolocationPosition_cxx::fromCpp(success), error.has_value() ? JFunc_void_GeolocationError_cxx::fromCpp(error.value()) : nullptr, options.has_value() ? JGeolocationOptions::fromCpp(options.value()) : nullptr);
  }
  double JHybridNitroGeolocationSpec::watchPosition(const std::function<void(const GeolocationPosition& /* position */)>& success, const std::optional<std::function<void(const GeolocationError& /* error */)>>& error, const std::optional<GeolocationOptions>& options) {
    static const auto method = javaClassStatic()->getMethod<double(jni::alias_ref<JFunc_void_GeolocationPosition::javaobject> /* success */, jni::alias_ref<JFunc_void_GeolocationError::javaobject> /* error */, jni::alias_ref<JGeolocationOptions> /* options */)>("watchPosition_cxx");
    auto __result = method(_javaPart, JFunc_void_GeolocationPosition_cxx::fromCpp(success), error.has_value() ? JFunc_void_GeolocationError_cxx::fromCpp(error.value()) : nullptr, options.has_value() ? JGeolocationOptions::fromCpp(options.value()) : nullptr);
    return __result;
  }
  void JHybridNitroGeolocationSpec::clearWatch(double watchId) {
    static const auto method = javaClassStatic()->getMethod<void(double /* watchId */)>("clearWatch");
    method(_javaPart, watchId);
  }
  void JHybridNitroGeolocationSpec::stopObserving() {
    static const auto method = javaClassStatic()->getMethod<void()>("stopObserving");
    method(_javaPart);
  }

} // namespace margelo::nitro::nitrogeolocation
