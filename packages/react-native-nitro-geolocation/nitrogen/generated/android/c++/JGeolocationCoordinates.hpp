///
/// JGeolocationCoordinates.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include <fbjni/fbjni.h>
#include "GeolocationCoordinates.hpp"

#include <optional>

namespace margelo::nitro::nitrogeolocation {

  using namespace facebook;

  /**
   * The C++ JNI bridge between the C++ struct "GeolocationCoordinates" and the the Kotlin data class "GeolocationCoordinates".
   */
  struct JGeolocationCoordinates final: public jni::JavaClass<JGeolocationCoordinates> {
  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/nitrogeolocation/GeolocationCoordinates;";

  public:
    /**
     * Convert this Java/Kotlin-based struct to the C++ struct GeolocationCoordinates by copying all values to C++.
     */
    [[maybe_unused]]
    [[nodiscard]]
    GeolocationCoordinates toCpp() const {
      static const auto clazz = javaClassStatic();
      static const auto fieldLatitude = clazz->getField<double>("latitude");
      double latitude = this->getFieldValue(fieldLatitude);
      static const auto fieldLongitude = clazz->getField<double>("longitude");
      double longitude = this->getFieldValue(fieldLongitude);
      static const auto fieldAltitude = clazz->getField<jni::JDouble>("altitude");
      jni::local_ref<jni::JDouble> altitude = this->getFieldValue(fieldAltitude);
      static const auto fieldAccuracy = clazz->getField<double>("accuracy");
      double accuracy = this->getFieldValue(fieldAccuracy);
      static const auto fieldAltitudeAccuracy = clazz->getField<jni::JDouble>("altitudeAccuracy");
      jni::local_ref<jni::JDouble> altitudeAccuracy = this->getFieldValue(fieldAltitudeAccuracy);
      static const auto fieldHeading = clazz->getField<jni::JDouble>("heading");
      jni::local_ref<jni::JDouble> heading = this->getFieldValue(fieldHeading);
      static const auto fieldSpeed = clazz->getField<jni::JDouble>("speed");
      jni::local_ref<jni::JDouble> speed = this->getFieldValue(fieldSpeed);
      return GeolocationCoordinates(
        latitude,
        longitude,
        altitude != nullptr ? std::make_optional(altitude->value()) : std::nullopt,
        accuracy,
        altitudeAccuracy != nullptr ? std::make_optional(altitudeAccuracy->value()) : std::nullopt,
        heading != nullptr ? std::make_optional(heading->value()) : std::nullopt,
        speed != nullptr ? std::make_optional(speed->value()) : std::nullopt
      );
    }

  public:
    /**
     * Create a Java/Kotlin-based struct by copying all values from the given C++ struct to Java.
     */
    [[maybe_unused]]
    static jni::local_ref<JGeolocationCoordinates::javaobject> fromCpp(const GeolocationCoordinates& value) {
      return newInstance(
        value.latitude,
        value.longitude,
        value.altitude.has_value() ? jni::JDouble::valueOf(value.altitude.value()) : nullptr,
        value.accuracy,
        value.altitudeAccuracy.has_value() ? jni::JDouble::valueOf(value.altitudeAccuracy.value()) : nullptr,
        value.heading.has_value() ? jni::JDouble::valueOf(value.heading.value()) : nullptr,
        value.speed.has_value() ? jni::JDouble::valueOf(value.speed.value()) : nullptr
      );
    }
  };

} // namespace margelo::nitro::nitrogeolocation
