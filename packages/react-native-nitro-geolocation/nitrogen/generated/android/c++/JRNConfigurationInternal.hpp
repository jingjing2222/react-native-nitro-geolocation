///
/// JRNConfigurationInternal.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include <fbjni/fbjni.h>
#include "RNConfigurationInternal.hpp"

#include "AuthorizationLevelInternal.hpp"
#include "JAuthorizationLevelInternal.hpp"
#include "JLocationProviderInternal.hpp"
#include "LocationProviderInternal.hpp"
#include <optional>

namespace margelo::nitro::nitrogeolocation {

  using namespace facebook;

  /**
   * The C++ JNI bridge between the C++ struct "RNConfigurationInternal" and the the Kotlin data class "RNConfigurationInternal".
   */
  struct JRNConfigurationInternal final: public jni::JavaClass<JRNConfigurationInternal> {
  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/nitrogeolocation/RNConfigurationInternal;";

  public:
    /**
     * Convert this Java/Kotlin-based struct to the C++ struct RNConfigurationInternal by copying all values to C++.
     */
    [[maybe_unused]]
    [[nodiscard]]
    RNConfigurationInternal toCpp() const {
      static const auto clazz = javaClassStatic();
      static const auto fieldSkipPermissionRequests = clazz->getField<jboolean>("skipPermissionRequests");
      jboolean skipPermissionRequests = this->getFieldValue(fieldSkipPermissionRequests);
      static const auto fieldAuthorizationLevel = clazz->getField<JAuthorizationLevelInternal>("authorizationLevel");
      jni::local_ref<JAuthorizationLevelInternal> authorizationLevel = this->getFieldValue(fieldAuthorizationLevel);
      static const auto fieldEnableBackgroundLocationUpdates = clazz->getField<jni::JBoolean>("enableBackgroundLocationUpdates");
      jni::local_ref<jni::JBoolean> enableBackgroundLocationUpdates = this->getFieldValue(fieldEnableBackgroundLocationUpdates);
      static const auto fieldLocationProvider = clazz->getField<JLocationProviderInternal>("locationProvider");
      jni::local_ref<JLocationProviderInternal> locationProvider = this->getFieldValue(fieldLocationProvider);
      return RNConfigurationInternal(
        static_cast<bool>(skipPermissionRequests),
        authorizationLevel != nullptr ? std::make_optional(authorizationLevel->toCpp()) : std::nullopt,
        enableBackgroundLocationUpdates != nullptr ? std::make_optional(static_cast<bool>(enableBackgroundLocationUpdates->value())) : std::nullopt,
        locationProvider != nullptr ? std::make_optional(locationProvider->toCpp()) : std::nullopt
      );
    }

  public:
    /**
     * Create a Java/Kotlin-based struct by copying all values from the given C++ struct to Java.
     */
    [[maybe_unused]]
    static jni::local_ref<JRNConfigurationInternal::javaobject> fromCpp(const RNConfigurationInternal& value) {
      return newInstance(
        value.skipPermissionRequests,
        value.authorizationLevel.has_value() ? JAuthorizationLevelInternal::fromCpp(value.authorizationLevel.value()) : nullptr,
        value.enableBackgroundLocationUpdates.has_value() ? jni::JBoolean::valueOf(value.enableBackgroundLocationUpdates.value()) : nullptr,
        value.locationProvider.has_value() ? JLocationProviderInternal::fromCpp(value.locationProvider.value()) : nullptr
      );
    }
  };

} // namespace margelo::nitro::nitrogeolocation
