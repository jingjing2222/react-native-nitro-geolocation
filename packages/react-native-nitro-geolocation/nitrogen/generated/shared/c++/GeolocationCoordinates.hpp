///
/// GeolocationCoordinates.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif



#include <optional>

namespace margelo::nitro::nitrogeolocation {

  /**
   * A struct which can be represented as a JavaScript object (GeolocationCoordinates).
   */
  struct GeolocationCoordinates {
  public:
    double latitude     SWIFT_PRIVATE;
    double longitude     SWIFT_PRIVATE;
    std::optional<double> altitude     SWIFT_PRIVATE;
    double accuracy     SWIFT_PRIVATE;
    std::optional<double> altitudeAccuracy     SWIFT_PRIVATE;
    std::optional<double> heading     SWIFT_PRIVATE;
    std::optional<double> speed     SWIFT_PRIVATE;

  public:
    GeolocationCoordinates() = default;
    explicit GeolocationCoordinates(double latitude, double longitude, std::optional<double> altitude, double accuracy, std::optional<double> altitudeAccuracy, std::optional<double> heading, std::optional<double> speed): latitude(latitude), longitude(longitude), altitude(altitude), accuracy(accuracy), altitudeAccuracy(altitudeAccuracy), heading(heading), speed(speed) {}
  };

} // namespace margelo::nitro::nitrogeolocation

namespace margelo::nitro {

  // C++ GeolocationCoordinates <> JS GeolocationCoordinates (object)
  template <>
  struct JSIConverter<margelo::nitro::nitrogeolocation::GeolocationCoordinates> final {
    static inline margelo::nitro::nitrogeolocation::GeolocationCoordinates fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return margelo::nitro::nitrogeolocation::GeolocationCoordinates(
        JSIConverter<double>::fromJSI(runtime, obj.getProperty(runtime, "latitude")),
        JSIConverter<double>::fromJSI(runtime, obj.getProperty(runtime, "longitude")),
        JSIConverter<std::optional<double>>::fromJSI(runtime, obj.getProperty(runtime, "altitude")),
        JSIConverter<double>::fromJSI(runtime, obj.getProperty(runtime, "accuracy")),
        JSIConverter<std::optional<double>>::fromJSI(runtime, obj.getProperty(runtime, "altitudeAccuracy")),
        JSIConverter<std::optional<double>>::fromJSI(runtime, obj.getProperty(runtime, "heading")),
        JSIConverter<std::optional<double>>::fromJSI(runtime, obj.getProperty(runtime, "speed"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const margelo::nitro::nitrogeolocation::GeolocationCoordinates& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "latitude", JSIConverter<double>::toJSI(runtime, arg.latitude));
      obj.setProperty(runtime, "longitude", JSIConverter<double>::toJSI(runtime, arg.longitude));
      obj.setProperty(runtime, "altitude", JSIConverter<std::optional<double>>::toJSI(runtime, arg.altitude));
      obj.setProperty(runtime, "accuracy", JSIConverter<double>::toJSI(runtime, arg.accuracy));
      obj.setProperty(runtime, "altitudeAccuracy", JSIConverter<std::optional<double>>::toJSI(runtime, arg.altitudeAccuracy));
      obj.setProperty(runtime, "heading", JSIConverter<std::optional<double>>::toJSI(runtime, arg.heading));
      obj.setProperty(runtime, "speed", JSIConverter<std::optional<double>>::toJSI(runtime, arg.speed));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<double>::canConvert(runtime, obj.getProperty(runtime, "latitude"))) return false;
      if (!JSIConverter<double>::canConvert(runtime, obj.getProperty(runtime, "longitude"))) return false;
      if (!JSIConverter<std::optional<double>>::canConvert(runtime, obj.getProperty(runtime, "altitude"))) return false;
      if (!JSIConverter<double>::canConvert(runtime, obj.getProperty(runtime, "accuracy"))) return false;
      if (!JSIConverter<std::optional<double>>::canConvert(runtime, obj.getProperty(runtime, "altitudeAccuracy"))) return false;
      if (!JSIConverter<std::optional<double>>::canConvert(runtime, obj.getProperty(runtime, "heading"))) return false;
      if (!JSIConverter<std::optional<double>>::canConvert(runtime, obj.getProperty(runtime, "speed"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
