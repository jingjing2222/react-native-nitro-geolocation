///
/// GeolocationPosition.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `GeolocationCoordinates` to properly resolve imports.
namespace margelo::nitro::nitrogeolocation { struct GeolocationCoordinates; }

#include "GeolocationCoordinates.hpp"

namespace margelo::nitro::nitrogeolocation {

  /**
   * A struct which can be represented as a JavaScript object (GeolocationPosition).
   */
  struct GeolocationPosition {
  public:
    GeolocationCoordinates coords     SWIFT_PRIVATE;
    double timestamp     SWIFT_PRIVATE;

  public:
    GeolocationPosition() = default;
    explicit GeolocationPosition(GeolocationCoordinates coords, double timestamp): coords(coords), timestamp(timestamp) {}
  };

} // namespace margelo::nitro::nitrogeolocation

namespace margelo::nitro {

  // C++ GeolocationPosition <> JS GeolocationPosition (object)
  template <>
  struct JSIConverter<margelo::nitro::nitrogeolocation::GeolocationPosition> final {
    static inline margelo::nitro::nitrogeolocation::GeolocationPosition fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return margelo::nitro::nitrogeolocation::GeolocationPosition(
        JSIConverter<margelo::nitro::nitrogeolocation::GeolocationCoordinates>::fromJSI(runtime, obj.getProperty(runtime, "coords")),
        JSIConverter<double>::fromJSI(runtime, obj.getProperty(runtime, "timestamp"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const margelo::nitro::nitrogeolocation::GeolocationPosition& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "coords", JSIConverter<margelo::nitro::nitrogeolocation::GeolocationCoordinates>::toJSI(runtime, arg.coords));
      obj.setProperty(runtime, "timestamp", JSIConverter<double>::toJSI(runtime, arg.timestamp));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<margelo::nitro::nitrogeolocation::GeolocationCoordinates>::canConvert(runtime, obj.getProperty(runtime, "coords"))) return false;
      if (!JSIConverter<double>::canConvert(runtime, obj.getProperty(runtime, "timestamp"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
