///
/// GeolocationError.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif



#include <string>

namespace margelo::nitro::nitrogeolocation {

  /**
   * A struct which can be represented as a JavaScript object (GeolocationError).
   */
  struct GeolocationError {
  public:
    double code     SWIFT_PRIVATE;
    std::string message     SWIFT_PRIVATE;
    double PERMISSION_DENIED     SWIFT_PRIVATE;
    double POSITION_UNAVAILABLE     SWIFT_PRIVATE;
    double TIMEOUT     SWIFT_PRIVATE;

  public:
    GeolocationError() = default;
    explicit GeolocationError(double code, std::string message, double PERMISSION_DENIED, double POSITION_UNAVAILABLE, double TIMEOUT): code(code), message(message), PERMISSION_DENIED(PERMISSION_DENIED), POSITION_UNAVAILABLE(POSITION_UNAVAILABLE), TIMEOUT(TIMEOUT) {}
  };

} // namespace margelo::nitro::nitrogeolocation

namespace margelo::nitro {

  // C++ GeolocationError <> JS GeolocationError (object)
  template <>
  struct JSIConverter<margelo::nitro::nitrogeolocation::GeolocationError> final {
    static inline margelo::nitro::nitrogeolocation::GeolocationError fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return margelo::nitro::nitrogeolocation::GeolocationError(
        JSIConverter<double>::fromJSI(runtime, obj.getProperty(runtime, "code")),
        JSIConverter<std::string>::fromJSI(runtime, obj.getProperty(runtime, "message")),
        JSIConverter<double>::fromJSI(runtime, obj.getProperty(runtime, "PERMISSION_DENIED")),
        JSIConverter<double>::fromJSI(runtime, obj.getProperty(runtime, "POSITION_UNAVAILABLE")),
        JSIConverter<double>::fromJSI(runtime, obj.getProperty(runtime, "TIMEOUT"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const margelo::nitro::nitrogeolocation::GeolocationError& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "code", JSIConverter<double>::toJSI(runtime, arg.code));
      obj.setProperty(runtime, "message", JSIConverter<std::string>::toJSI(runtime, arg.message));
      obj.setProperty(runtime, "PERMISSION_DENIED", JSIConverter<double>::toJSI(runtime, arg.PERMISSION_DENIED));
      obj.setProperty(runtime, "POSITION_UNAVAILABLE", JSIConverter<double>::toJSI(runtime, arg.POSITION_UNAVAILABLE));
      obj.setProperty(runtime, "TIMEOUT", JSIConverter<double>::toJSI(runtime, arg.TIMEOUT));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<double>::canConvert(runtime, obj.getProperty(runtime, "code"))) return false;
      if (!JSIConverter<std::string>::canConvert(runtime, obj.getProperty(runtime, "message"))) return false;
      if (!JSIConverter<double>::canConvert(runtime, obj.getProperty(runtime, "PERMISSION_DENIED"))) return false;
      if (!JSIConverter<double>::canConvert(runtime, obj.getProperty(runtime, "POSITION_UNAVAILABLE"))) return false;
      if (!JSIConverter<double>::canConvert(runtime, obj.getProperty(runtime, "TIMEOUT"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
