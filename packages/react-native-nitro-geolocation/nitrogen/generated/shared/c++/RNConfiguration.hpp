///
/// RNConfiguration.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `AuthorizationLevel` to properly resolve imports.
namespace margelo::nitro::nitrogeolocation { enum class AuthorizationLevel; }
// Forward declaration of `LocationProvider` to properly resolve imports.
namespace margelo::nitro::nitrogeolocation { enum class LocationProvider; }

#include "AuthorizationLevel.hpp"
#include <optional>
#include "LocationProvider.hpp"

namespace margelo::nitro::nitrogeolocation {

  /**
   * A struct which can be represented as a JavaScript object (RNConfiguration).
   */
  struct RNConfiguration {
  public:
    bool skipPermissionRequests     SWIFT_PRIVATE;
    std::optional<AuthorizationLevel> authorizationLevel     SWIFT_PRIVATE;
    std::optional<bool> enableBackgroundLocationUpdates     SWIFT_PRIVATE;
    std::optional<LocationProvider> locationProvider     SWIFT_PRIVATE;

  public:
    RNConfiguration() = default;
    explicit RNConfiguration(bool skipPermissionRequests, std::optional<AuthorizationLevel> authorizationLevel, std::optional<bool> enableBackgroundLocationUpdates, std::optional<LocationProvider> locationProvider): skipPermissionRequests(skipPermissionRequests), authorizationLevel(authorizationLevel), enableBackgroundLocationUpdates(enableBackgroundLocationUpdates), locationProvider(locationProvider) {}
  };

} // namespace margelo::nitro::nitrogeolocation

namespace margelo::nitro {

  // C++ RNConfiguration <> JS RNConfiguration (object)
  template <>
  struct JSIConverter<margelo::nitro::nitrogeolocation::RNConfiguration> final {
    static inline margelo::nitro::nitrogeolocation::RNConfiguration fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return margelo::nitro::nitrogeolocation::RNConfiguration(
        JSIConverter<bool>::fromJSI(runtime, obj.getProperty(runtime, "skipPermissionRequests")),
        JSIConverter<std::optional<margelo::nitro::nitrogeolocation::AuthorizationLevel>>::fromJSI(runtime, obj.getProperty(runtime, "authorizationLevel")),
        JSIConverter<std::optional<bool>>::fromJSI(runtime, obj.getProperty(runtime, "enableBackgroundLocationUpdates")),
        JSIConverter<std::optional<margelo::nitro::nitrogeolocation::LocationProvider>>::fromJSI(runtime, obj.getProperty(runtime, "locationProvider"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const margelo::nitro::nitrogeolocation::RNConfiguration& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "skipPermissionRequests", JSIConverter<bool>::toJSI(runtime, arg.skipPermissionRequests));
      obj.setProperty(runtime, "authorizationLevel", JSIConverter<std::optional<margelo::nitro::nitrogeolocation::AuthorizationLevel>>::toJSI(runtime, arg.authorizationLevel));
      obj.setProperty(runtime, "enableBackgroundLocationUpdates", JSIConverter<std::optional<bool>>::toJSI(runtime, arg.enableBackgroundLocationUpdates));
      obj.setProperty(runtime, "locationProvider", JSIConverter<std::optional<margelo::nitro::nitrogeolocation::LocationProvider>>::toJSI(runtime, arg.locationProvider));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<bool>::canConvert(runtime, obj.getProperty(runtime, "skipPermissionRequests"))) return false;
      if (!JSIConverter<std::optional<margelo::nitro::nitrogeolocation::AuthorizationLevel>>::canConvert(runtime, obj.getProperty(runtime, "authorizationLevel"))) return false;
      if (!JSIConverter<std::optional<bool>>::canConvert(runtime, obj.getProperty(runtime, "enableBackgroundLocationUpdates"))) return false;
      if (!JSIConverter<std::optional<margelo::nitro::nitrogeolocation::LocationProvider>>::canConvert(runtime, obj.getProperty(runtime, "locationProvider"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
