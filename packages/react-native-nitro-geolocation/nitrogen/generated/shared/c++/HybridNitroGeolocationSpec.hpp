///
/// HybridNitroGeolocationSpec.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/HybridObject.hpp>)
#include <NitroModules/HybridObject.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `RNConfigurationInternal` to properly resolve imports.
namespace margelo::nitro::nitrogeolocation { struct RNConfigurationInternal; }
// Forward declaration of `GeolocationError` to properly resolve imports.
namespace margelo::nitro::nitrogeolocation { struct GeolocationError; }
// Forward declaration of `GeolocationResponse` to properly resolve imports.
namespace margelo::nitro::nitrogeolocation { struct GeolocationResponse; }
// Forward declaration of `GeolocationOptions` to properly resolve imports.
namespace margelo::nitro::nitrogeolocation { struct GeolocationOptions; }

#include "RNConfigurationInternal.hpp"
#include <functional>
#include <optional>
#include "GeolocationError.hpp"
#include "GeolocationResponse.hpp"
#include "GeolocationOptions.hpp"

namespace margelo::nitro::nitrogeolocation {

  using namespace margelo::nitro;

  /**
   * An abstract base class for `NitroGeolocation`
   * Inherit this class to create instances of `HybridNitroGeolocationSpec` in C++.
   * You must explicitly call `HybridObject`'s constructor yourself, because it is virtual.
   * @example
   * ```cpp
   * class HybridNitroGeolocation: public HybridNitroGeolocationSpec {
   * public:
   *   HybridNitroGeolocation(...): HybridObject(TAG) { ... }
   *   // ...
   * };
   * ```
   */
  class HybridNitroGeolocationSpec: public virtual HybridObject {
    public:
      // Constructor
      explicit HybridNitroGeolocationSpec(): HybridObject(TAG) { }

      // Destructor
      ~HybridNitroGeolocationSpec() override = default;

    public:
      // Properties
      

    public:
      // Methods
      virtual void setRNConfiguration(const RNConfigurationInternal& config) = 0;
      virtual void requestAuthorization(const std::optional<std::function<void()>>& success, const std::optional<std::function<void(const GeolocationError& /* error */)>>& error) = 0;
      virtual void getCurrentPosition(const std::function<void(const GeolocationResponse& /* position */)>& success, const std::optional<std::function<void(const GeolocationError& /* error */)>>& error, const std::optional<GeolocationOptions>& options) = 0;
      virtual double watchPosition(const std::function<void(const GeolocationResponse& /* position */)>& success, const std::optional<std::function<void(const GeolocationError& /* error */)>>& error, const std::optional<GeolocationOptions>& options) = 0;
      virtual void clearWatch(double watchId) = 0;
      virtual void stopObserving() = 0;

    protected:
      // Hybrid Setup
      void loadHybridMethods() override;

    protected:
      // Tag for logging
      static constexpr auto TAG = "NitroGeolocation";
  };

} // namespace margelo::nitro::nitrogeolocation
