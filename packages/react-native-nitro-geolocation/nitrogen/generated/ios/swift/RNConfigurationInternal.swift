///
/// RNConfigurationInternal.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import NitroModules

/**
 * Represents an instance of `RNConfigurationInternal`, backed by a C++ struct.
 */
public typealias RNConfigurationInternal = margelo.nitro.nitrogeolocation.RNConfigurationInternal

public extension RNConfigurationInternal {
  private typealias bridge = margelo.nitro.nitrogeolocation.bridge.swift

  /**
   * Create a new instance of `RNConfigurationInternal`.
   */
  init(skipPermissionRequests: Bool, authorizationLevel: AuthorizationLevelInternal?, enableBackgroundLocationUpdates: Bool?, locationProvider: LocationProviderInternal?) {
    self.init(skipPermissionRequests, { () -> bridge.std__optional_AuthorizationLevelInternal_ in
      if let __unwrappedValue = authorizationLevel {
        return bridge.create_std__optional_AuthorizationLevelInternal_(__unwrappedValue)
      } else {
        return .init()
      }
    }(), { () -> bridge.std__optional_bool_ in
      if let __unwrappedValue = enableBackgroundLocationUpdates {
        return bridge.create_std__optional_bool_(__unwrappedValue)
      } else {
        return .init()
      }
    }(), { () -> bridge.std__optional_LocationProviderInternal_ in
      if let __unwrappedValue = locationProvider {
        return bridge.create_std__optional_LocationProviderInternal_(__unwrappedValue)
      } else {
        return .init()
      }
    }())
  }

  var skipPermissionRequests: Bool {
    @inline(__always)
    get {
      return self.__skipPermissionRequests
    }
    @inline(__always)
    set {
      self.__skipPermissionRequests = newValue
    }
  }
  
  var authorizationLevel: AuthorizationLevelInternal? {
    @inline(__always)
    get {
      return self.__authorizationLevel.value
    }
    @inline(__always)
    set {
      self.__authorizationLevel = { () -> bridge.std__optional_AuthorizationLevelInternal_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_AuthorizationLevelInternal_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
  }
  
  var enableBackgroundLocationUpdates: Bool? {
    @inline(__always)
    get {
      return self.__enableBackgroundLocationUpdates.value
    }
    @inline(__always)
    set {
      self.__enableBackgroundLocationUpdates = { () -> bridge.std__optional_bool_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_bool_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
  }
  
  var locationProvider: LocationProviderInternal? {
    @inline(__always)
    get {
      return self.__locationProvider.value
    }
    @inline(__always)
    set {
      self.__locationProvider = { () -> bridge.std__optional_LocationProviderInternal_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_LocationProviderInternal_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
  }
}
