///
/// GeolocationCoordinates.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import NitroModules

/**
 * Represents an instance of `GeolocationCoordinates`, backed by a C++ struct.
 */
public typealias GeolocationCoordinates = margelo.nitro.nitrogeolocation.GeolocationCoordinates

public extension GeolocationCoordinates {
  private typealias bridge = margelo.nitro.nitrogeolocation.bridge.swift

  /**
   * Create a new instance of `GeolocationCoordinates`.
   */
  init(latitude: Double, longitude: Double, altitude: Double?, accuracy: Double, altitudeAccuracy: Double?, heading: Double?, speed: Double?) {
    self.init(latitude, longitude, { () -> bridge.std__optional_double_ in
      if let __unwrappedValue = altitude {
        return bridge.create_std__optional_double_(__unwrappedValue)
      } else {
        return .init()
      }
    }(), accuracy, { () -> bridge.std__optional_double_ in
      if let __unwrappedValue = altitudeAccuracy {
        return bridge.create_std__optional_double_(__unwrappedValue)
      } else {
        return .init()
      }
    }(), { () -> bridge.std__optional_double_ in
      if let __unwrappedValue = heading {
        return bridge.create_std__optional_double_(__unwrappedValue)
      } else {
        return .init()
      }
    }(), { () -> bridge.std__optional_double_ in
      if let __unwrappedValue = speed {
        return bridge.create_std__optional_double_(__unwrappedValue)
      } else {
        return .init()
      }
    }())
  }

  var latitude: Double {
    @inline(__always)
    get {
      return self.__latitude
    }
    @inline(__always)
    set {
      self.__latitude = newValue
    }
  }
  
  var longitude: Double {
    @inline(__always)
    get {
      return self.__longitude
    }
    @inline(__always)
    set {
      self.__longitude = newValue
    }
  }
  
  var altitude: Double? {
    @inline(__always)
    get {
      return self.__altitude.value
    }
    @inline(__always)
    set {
      self.__altitude = { () -> bridge.std__optional_double_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_double_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
  }
  
  var accuracy: Double {
    @inline(__always)
    get {
      return self.__accuracy
    }
    @inline(__always)
    set {
      self.__accuracy = newValue
    }
  }
  
  var altitudeAccuracy: Double? {
    @inline(__always)
    get {
      return self.__altitudeAccuracy.value
    }
    @inline(__always)
    set {
      self.__altitudeAccuracy = { () -> bridge.std__optional_double_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_double_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
  }
  
  var heading: Double? {
    @inline(__always)
    get {
      return self.__heading.value
    }
    @inline(__always)
    set {
      self.__heading = { () -> bridge.std__optional_double_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_double_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
  }
  
  var speed: Double? {
    @inline(__always)
    get {
      return self.__speed.value
    }
    @inline(__always)
    set {
      self.__speed = { () -> bridge.std__optional_double_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_double_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
  }
}
