///
/// HybridNitroGeolocationSpecSwift.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include "HybridNitroGeolocationSpec.hpp"

// Forward declaration of `HybridNitroGeolocationSpec_cxx` to properly resolve imports.
namespace NitroGeolocation { class HybridNitroGeolocationSpec_cxx; }

// Forward declaration of `RNConfiguration` to properly resolve imports.
namespace margelo::nitro::nitrogeolocation { struct RNConfiguration; }
// Forward declaration of `AuthorizationLevel` to properly resolve imports.
namespace margelo::nitro::nitrogeolocation { enum class AuthorizationLevel; }
// Forward declaration of `LocationProvider` to properly resolve imports.
namespace margelo::nitro::nitrogeolocation { enum class LocationProvider; }

#include "RNConfiguration.hpp"
#include "AuthorizationLevel.hpp"
#include <optional>
#include "LocationProvider.hpp"

#include "NitroGeolocation-Swift-Cxx-Umbrella.hpp"

namespace margelo::nitro::nitrogeolocation {

  /**
   * The C++ part of HybridNitroGeolocationSpec_cxx.swift.
   *
   * HybridNitroGeolocationSpecSwift (C++) accesses HybridNitroGeolocationSpec_cxx (Swift), and might
   * contain some additional bridging code for C++ <> Swift interop.
   *
   * Since this obviously introduces an overhead, I hope at some point in
   * the future, HybridNitroGeolocationSpec_cxx can directly inherit from the C++ class HybridNitroGeolocationSpec
   * to simplify the whole structure and memory management.
   */
  class HybridNitroGeolocationSpecSwift: public virtual HybridNitroGeolocationSpec {
  public:
    // Constructor from a Swift instance
    explicit HybridNitroGeolocationSpecSwift(const NitroGeolocation::HybridNitroGeolocationSpec_cxx& swiftPart):
      HybridObject(HybridNitroGeolocationSpec::TAG),
      _swiftPart(swiftPart) { }

  public:
    // Get the Swift part
    inline NitroGeolocation::HybridNitroGeolocationSpec_cxx& getSwiftPart() noexcept {
      return _swiftPart;
    }

  public:
    inline size_t getExternalMemorySize() noexcept override {
      return _swiftPart.getMemorySize();
    }
    void dispose() noexcept override {
      _swiftPart.dispose();
    }

  public:
    // Properties
    

  public:
    // Methods
    inline void setRNConfiguration(const RNConfiguration& config) override {
      auto __result = _swiftPart.setRNConfiguration(std::forward<decltype(config)>(config));
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
    }

  private:
    NitroGeolocation::HybridNitroGeolocationSpec_cxx _swiftPart;
  };

} // namespace margelo::nitro::nitrogeolocation
