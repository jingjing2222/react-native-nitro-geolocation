///
/// NitroGeolocation-Swift-Cxx-Bridge.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

// Forward declarations of C++ defined types
// Forward declaration of `AuthorizationLevelInternal` to properly resolve imports.
namespace margelo::nitro::nitrogeolocation { enum class AuthorizationLevelInternal; }
// Forward declaration of `GeolocationError` to properly resolve imports.
namespace margelo::nitro::nitrogeolocation { struct GeolocationError; }
// Forward declaration of `HybridNitroGeolocationSpec` to properly resolve imports.
namespace margelo::nitro::nitrogeolocation { class HybridNitroGeolocationSpec; }
// Forward declaration of `LocationProviderInternal` to properly resolve imports.
namespace margelo::nitro::nitrogeolocation { enum class LocationProviderInternal; }

// Forward declarations of Swift defined types
// Forward declaration of `HybridNitroGeolocationSpec_cxx` to properly resolve imports.
namespace NitroGeolocation { class HybridNitroGeolocationSpec_cxx; }

// Include C++ defined types
#include "AuthorizationLevelInternal.hpp"
#include "GeolocationError.hpp"
#include "HybridNitroGeolocationSpec.hpp"
#include "LocationProviderInternal.hpp"
#include <NitroModules/Result.hpp>
#include <exception>
#include <functional>
#include <memory>
#include <optional>
#include <string>

/**
 * Contains specialized versions of C++ templated types so they can be accessed from Swift,
 * as well as helper functions to interact with those C++ types from Swift.
 */
namespace margelo::nitro::nitrogeolocation::bridge::swift {

  // pragma MARK: std::optional<AuthorizationLevelInternal>
  /**
   * Specialized version of `std::optional<AuthorizationLevelInternal>`.
   */
  using std__optional_AuthorizationLevelInternal_ = std::optional<AuthorizationLevelInternal>;
  inline std::optional<AuthorizationLevelInternal> create_std__optional_AuthorizationLevelInternal_(const AuthorizationLevelInternal& value) noexcept {
    return std::optional<AuthorizationLevelInternal>(value);
  }
  inline bool has_value_std__optional_AuthorizationLevelInternal_(const std::optional<AuthorizationLevelInternal>& optional) noexcept {
    return optional.has_value();
  }
  inline AuthorizationLevelInternal get_std__optional_AuthorizationLevelInternal_(const std::optional<AuthorizationLevelInternal>& optional) noexcept {
    return *optional;
  }
  
  // pragma MARK: std::optional<bool>
  /**
   * Specialized version of `std::optional<bool>`.
   */
  using std__optional_bool_ = std::optional<bool>;
  inline std::optional<bool> create_std__optional_bool_(const bool& value) noexcept {
    return std::optional<bool>(value);
  }
  inline bool has_value_std__optional_bool_(const std::optional<bool>& optional) noexcept {
    return optional.has_value();
  }
  inline bool get_std__optional_bool_(const std::optional<bool>& optional) noexcept {
    return *optional;
  }
  
  // pragma MARK: std::optional<LocationProviderInternal>
  /**
   * Specialized version of `std::optional<LocationProviderInternal>`.
   */
  using std__optional_LocationProviderInternal_ = std::optional<LocationProviderInternal>;
  inline std::optional<LocationProviderInternal> create_std__optional_LocationProviderInternal_(const LocationProviderInternal& value) noexcept {
    return std::optional<LocationProviderInternal>(value);
  }
  inline bool has_value_std__optional_LocationProviderInternal_(const std::optional<LocationProviderInternal>& optional) noexcept {
    return optional.has_value();
  }
  inline LocationProviderInternal get_std__optional_LocationProviderInternal_(const std::optional<LocationProviderInternal>& optional) noexcept {
    return *optional;
  }
  
  // pragma MARK: std::function<void()>
  /**
   * Specialized version of `std::function<void()>`.
   */
  using Func_void = std::function<void()>;
  /**
   * Wrapper class for a `std::function<void()>`, this can be used from Swift.
   */
  class Func_void_Wrapper final {
  public:
    explicit Func_void_Wrapper(std::function<void()>&& func): _function(std::make_unique<std::function<void()>>(std::move(func))) {}
    inline void call() const noexcept {
      _function->operator()();
    }
  private:
    std::unique_ptr<std::function<void()>> _function;
  } SWIFT_NONCOPYABLE;
  Func_void create_Func_void(void* NON_NULL swiftClosureWrapper) noexcept;
  inline Func_void_Wrapper wrap_Func_void(Func_void value) noexcept {
    return Func_void_Wrapper(std::move(value));
  }
  
  // pragma MARK: std::optional<std::function<void()>>
  /**
   * Specialized version of `std::optional<std::function<void()>>`.
   */
  using std__optional_std__function_void____ = std::optional<std::function<void()>>;
  inline std::optional<std::function<void()>> create_std__optional_std__function_void____(const std::function<void()>& value) noexcept {
    return std::optional<std::function<void()>>(value);
  }
  inline bool has_value_std__optional_std__function_void____(const std::optional<std::function<void()>>& optional) noexcept {
    return optional.has_value();
  }
  inline std::function<void()> get_std__optional_std__function_void____(const std::optional<std::function<void()>>& optional) noexcept {
    return *optional;
  }
  
  // pragma MARK: std::function<void(const GeolocationError& /* error */)>
  /**
   * Specialized version of `std::function<void(const GeolocationError&)>`.
   */
  using Func_void_GeolocationError = std::function<void(const GeolocationError& /* error */)>;
  /**
   * Wrapper class for a `std::function<void(const GeolocationError& / * error * /)>`, this can be used from Swift.
   */
  class Func_void_GeolocationError_Wrapper final {
  public:
    explicit Func_void_GeolocationError_Wrapper(std::function<void(const GeolocationError& /* error */)>&& func): _function(std::make_unique<std::function<void(const GeolocationError& /* error */)>>(std::move(func))) {}
    inline void call(GeolocationError error) const noexcept {
      _function->operator()(error);
    }
  private:
    std::unique_ptr<std::function<void(const GeolocationError& /* error */)>> _function;
  } SWIFT_NONCOPYABLE;
  Func_void_GeolocationError create_Func_void_GeolocationError(void* NON_NULL swiftClosureWrapper) noexcept;
  inline Func_void_GeolocationError_Wrapper wrap_Func_void_GeolocationError(Func_void_GeolocationError value) noexcept {
    return Func_void_GeolocationError_Wrapper(std::move(value));
  }
  
  // pragma MARK: std::optional<std::function<void(const GeolocationError& /* error */)>>
  /**
   * Specialized version of `std::optional<std::function<void(const GeolocationError& / * error * /)>>`.
   */
  using std__optional_std__function_void_const_GeolocationError_____error______ = std::optional<std::function<void(const GeolocationError& /* error */)>>;
  inline std::optional<std::function<void(const GeolocationError& /* error */)>> create_std__optional_std__function_void_const_GeolocationError_____error______(const std::function<void(const GeolocationError& /* error */)>& value) noexcept {
    return std::optional<std::function<void(const GeolocationError& /* error */)>>(value);
  }
  inline bool has_value_std__optional_std__function_void_const_GeolocationError_____error______(const std::optional<std::function<void(const GeolocationError& /* error */)>>& optional) noexcept {
    return optional.has_value();
  }
  inline std::function<void(const GeolocationError& /* error */)> get_std__optional_std__function_void_const_GeolocationError_____error______(const std::optional<std::function<void(const GeolocationError& /* error */)>>& optional) noexcept {
    return *optional;
  }
  
  // pragma MARK: std::shared_ptr<HybridNitroGeolocationSpec>
  /**
   * Specialized version of `std::shared_ptr<HybridNitroGeolocationSpec>`.
   */
  using std__shared_ptr_HybridNitroGeolocationSpec_ = std::shared_ptr<HybridNitroGeolocationSpec>;
  std::shared_ptr<HybridNitroGeolocationSpec> create_std__shared_ptr_HybridNitroGeolocationSpec_(void* NON_NULL swiftUnsafePointer) noexcept;
  void* NON_NULL get_std__shared_ptr_HybridNitroGeolocationSpec_(std__shared_ptr_HybridNitroGeolocationSpec_ cppType) noexcept;
  
  // pragma MARK: std::weak_ptr<HybridNitroGeolocationSpec>
  using std__weak_ptr_HybridNitroGeolocationSpec_ = std::weak_ptr<HybridNitroGeolocationSpec>;
  inline std__weak_ptr_HybridNitroGeolocationSpec_ weakify_std__shared_ptr_HybridNitroGeolocationSpec_(const std::shared_ptr<HybridNitroGeolocationSpec>& strong) noexcept { return strong; }
  
  // pragma MARK: Result<void>
  using Result_void_ = Result<void>;
  inline Result_void_ create_Result_void_() noexcept {
    return Result<void>::withValue();
  }
  inline Result_void_ create_Result_void_(const std::exception_ptr& error) noexcept {
    return Result<void>::withError(error);
  }

} // namespace margelo::nitro::nitrogeolocation::bridge::swift
