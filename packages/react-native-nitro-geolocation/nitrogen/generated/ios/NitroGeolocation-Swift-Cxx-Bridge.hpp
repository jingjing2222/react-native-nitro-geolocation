///
/// NitroGeolocation-Swift-Cxx-Bridge.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

// Forward declarations of C++ defined types
// Forward declaration of `AuthorizationLevel` to properly resolve imports.
namespace margelo::nitro::nitrogeolocation { enum class AuthorizationLevel; }
// Forward declaration of `HybridNitroGeolocationSpec` to properly resolve imports.
namespace margelo::nitro::nitrogeolocation { class HybridNitroGeolocationSpec; }
// Forward declaration of `LocationProvider` to properly resolve imports.
namespace margelo::nitro::nitrogeolocation { enum class LocationProvider; }

// Forward declarations of Swift defined types
// Forward declaration of `HybridNitroGeolocationSpec_cxx` to properly resolve imports.
namespace NitroGeolocation { class HybridNitroGeolocationSpec_cxx; }

// Include C++ defined types
#include "AuthorizationLevel.hpp"
#include "HybridNitroGeolocationSpec.hpp"
#include "LocationProvider.hpp"
#include <NitroModules/Result.hpp>
#include <exception>
#include <memory>
#include <optional>

/**
 * Contains specialized versions of C++ templated types so they can be accessed from Swift,
 * as well as helper functions to interact with those C++ types from Swift.
 */
namespace margelo::nitro::nitrogeolocation::bridge::swift {

  // pragma MARK: std::optional<AuthorizationLevel>
  /**
   * Specialized version of `std::optional<AuthorizationLevel>`.
   */
  using std__optional_AuthorizationLevel_ = std::optional<AuthorizationLevel>;
  inline std::optional<AuthorizationLevel> create_std__optional_AuthorizationLevel_(const AuthorizationLevel& value) noexcept {
    return std::optional<AuthorizationLevel>(value);
  }
  inline bool has_value_std__optional_AuthorizationLevel_(const std::optional<AuthorizationLevel>& optional) noexcept {
    return optional.has_value();
  }
  inline AuthorizationLevel get_std__optional_AuthorizationLevel_(const std::optional<AuthorizationLevel>& optional) noexcept {
    return *optional;
  }
  
  // pragma MARK: std::optional<bool>
  /**
   * Specialized version of `std::optional<bool>`.
   */
  using std__optional_bool_ = std::optional<bool>;
  inline std::optional<bool> create_std__optional_bool_(const bool& value) noexcept {
    return std::optional<bool>(value);
  }
  inline bool has_value_std__optional_bool_(const std::optional<bool>& optional) noexcept {
    return optional.has_value();
  }
  inline bool get_std__optional_bool_(const std::optional<bool>& optional) noexcept {
    return *optional;
  }
  
  // pragma MARK: std::optional<LocationProvider>
  /**
   * Specialized version of `std::optional<LocationProvider>`.
   */
  using std__optional_LocationProvider_ = std::optional<LocationProvider>;
  inline std::optional<LocationProvider> create_std__optional_LocationProvider_(const LocationProvider& value) noexcept {
    return std::optional<LocationProvider>(value);
  }
  inline bool has_value_std__optional_LocationProvider_(const std::optional<LocationProvider>& optional) noexcept {
    return optional.has_value();
  }
  inline LocationProvider get_std__optional_LocationProvider_(const std::optional<LocationProvider>& optional) noexcept {
    return *optional;
  }
  
  // pragma MARK: std::shared_ptr<HybridNitroGeolocationSpec>
  /**
   * Specialized version of `std::shared_ptr<HybridNitroGeolocationSpec>`.
   */
  using std__shared_ptr_HybridNitroGeolocationSpec_ = std::shared_ptr<HybridNitroGeolocationSpec>;
  std::shared_ptr<HybridNitroGeolocationSpec> create_std__shared_ptr_HybridNitroGeolocationSpec_(void* NON_NULL swiftUnsafePointer) noexcept;
  void* NON_NULL get_std__shared_ptr_HybridNitroGeolocationSpec_(std__shared_ptr_HybridNitroGeolocationSpec_ cppType) noexcept;
  
  // pragma MARK: std::weak_ptr<HybridNitroGeolocationSpec>
  using std__weak_ptr_HybridNitroGeolocationSpec_ = std::weak_ptr<HybridNitroGeolocationSpec>;
  inline std__weak_ptr_HybridNitroGeolocationSpec_ weakify_std__shared_ptr_HybridNitroGeolocationSpec_(const std::shared_ptr<HybridNitroGeolocationSpec>& strong) noexcept { return strong; }
  
  // pragma MARK: Result<void>
  using Result_void_ = Result<void>;
  inline Result_void_ create_Result_void_() noexcept {
    return Result<void>::withValue();
  }
  inline Result_void_ create_Result_void_(const std::exception_ptr& error) noexcept {
    return Result<void>::withError(error);
  }

} // namespace margelo::nitro::nitrogeolocation::bridge::swift
